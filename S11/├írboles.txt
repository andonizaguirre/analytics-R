#------------------------------------------------------------------#
#                               LIBRARIAS                          #
#------------------------------------------------------------------#
library(ggplot2)
library(reshape)
library(ggpubr)
library(reshape2)
library(dplyr)
library(caret)
library(rpart)
library(rpart.plot)
library(purrr)
library(precrec)
library(ROSE)
library(ROCR)
#------------------------------------------------------------------#
#                       CARGANDO LA BASE DE DATOS                  #
#------------------------------------------------------------------#
Datos<-read.delim("clipboard")
head(Datos,10)
str(Datos)
Datos$Educacion<-ordered(Datos$Educacion,c("No.Sup","Sup.Incomp","Sup.Comp"))

#------------------------------------------------------------------#
#               DATOS DE ENTRENAMIENTO Y DE PRUEBA                 #
#------------------------------------------------------------------#

set.seed(1983)
indice<- createDataPartition(Datos$Credito, p=0.7, list=FALSE)
data.train <- Datos[ indice, ]                         
data.test  <- Datos[-indice, ] 
dim(data.train)
dim(data.test)

#------------------------------------------------------------------#
#                         ALGORITMO CART                           #
#------------------------------------------------------------------#

# Árbol completo
# ---------------
set.seed(200)

arbol.completo <- rpart(Credito ~ . , data=data.train, method="class",cp=0, minbucket=0)
rpart.plot(arbol.completo, digits=-1,type=2, extra=101, cex = 0.7, nn=TRUE)
printcp(arbol.completo)

# PRedicción árbol completo
# -------------------------
pred1<-predict(arbol.completo, data.test, type = "class")

# Calculando el accuracy 
accuracy<-mean(pred1 == data.test$Credito)  ;accuracy

# Eligiendo el CP adecuado y podando el árbol
# -------------------------------------------

minxerr <- which.min(arbol.completo$cptable[,"xerror"])
min.cp   <- arbol.completo$cptable[minxerr, "CP"]
min.cp
arbol.pruned <- prune(arbol.completo,cp=min.cp)
arbol.pruned
rpart.plot(arbol.pruned, digits=-1, type=2, extra=101,cex = 0.7, nn=TRUE)

# PRedicción árbol podado
pred2<-predict(arbol.pruned, data.test, type = "class")
# Calculando el accuracy 
mean(pred2 == data.test$Credito)

# CART con el paquete caret y validación cruzada 
# ----------------------------------------------
# Relación de modelos 
library(caret)
names(getModelInfo())

#Relación de parámetros a ajustar de un modelo
modelLookup(model='rpart')

# Aplicando el modelo con Validación Cruzada Repetida 
set.seed(200)
ctrl <- trainControl(method="cv", number=10)
# classProbs=TRUE,summaryFunction = twoClassSummary)
modelo_cart <- train(Credito ~ ., 
                     data = data.train, 
                     method = "rpart", 
                     trControl = ctrl, 
                     tuneGrid = expand.grid(cp=seq(0,0.5,0.001)),
                     metric="Accuracy" )
modelo_cart

modelo_cart$bestTune
plot(modelo_cart)
rpart.plot(modelo_cart$finalModel, roundint=FALSE,digits=-3, type=1, extra=101,cex = .7, nn=TRUE)

pred_cart <- predict(modelo_cart, newdata=data.test[,-1],type="raw")
confusionMatrix(data= pred_cart, reference= as.factor(data.test$Credito), positive="Si")

# Predicción correcta y error
# ---------------------------
accuracy <- mean(data.test$Credito==pred_cart) ; accuracy
error <- mean(data.test$Credito!=pred_cart) ; error

# Curva ROC
# -----------
pred_cart2 <- predict(modelo_cart, newdata=data.test[,-1],type="prob")
roc.curve(data.test$Credito, pred_cart2[,2],lty=2,lwd=1.8,col="blue" ,main="ROC curves")

# Importancia de Variables
# -------------------------
impor=varImp(modelo_cart)
impor
plot(impor)

#------------------------------------------------------------------#
#                      EL ALGORITMO BAGGING                        #
#------------------------------------------------------------------#
set.seed(200)
ctrl <- trainControl(method="cv",number=10)
modelo_bag <- train(Credito ~ ., 
                    data = data.train, 
                    method = "treebag",
                    trControl = ctrl, 
                    tuneLength = 5, 
                    metric="Accuracy")
modelo_bag

pred_bag <- predict(modelo_bag, newdata=data.test[,-1],type="raw")
confusionMatrix(data= pred_bag, reference= as.factor(data.test$Credito), positive="Si")

# Predicción correcta y error
# ---------------------------
accuracy <- mean(data.test$Credito==pred_bag) ; accuracy
error <- mean(data.test$Credito!=pred_bag) ; error

# Curva ROC
# -----------
pred_bag2 <- predict(modelo_bag, newdata=data.test[,-1],type="prob")
roc.curve(data.test$Credito, pred_bag2[,2],lty=2,lwd=1.8,col="blue" ,main="ROC curves")


# Importancia de Variables
# -------------------------
impor=varImp(modelo_bag)
impor
plot(impor)

#------------------------------------------------------------------#
#                   EL ALGORITMO RANDOM FOREST                     #
#------------------------------------------------------------------#

set.seed(200)
modelLookup(model='rf')
ctrl <- trainControl(method="cv",number=10)

modelo_rf <- train(Credito ~ ., 
                   data = data.train, 
                   method = "rf", 
                   trControl = ctrl, 
                   tuneLength = 5,
                   metric="Accuracy")

modelo_rf

pred_rf <- predict(modelo_rf, newdata=data.test[,-1],type="raw")
confusionMatrix(data= pred_rf, reference= as.factor(data.test$Credito), positive="Si")

# Prediccion correcta y error
# ---------------------------
accuracy <- mean(data.test$Credito==pred_rf) ; accuracy
error <- mean(data.test$Credito!=pred_rf) ; error

# Curva ROC
# -----------
pred_rf2 <- predict(modelo_rf, newdata=data.test[,-1],type="prob")
roc.curve(data.test$Credito, pred_rf2[,2],lty=2,lwd=1.8,col="blue" ,main="ROC curves")

# Importancia de Variables
# -------------------------
impor=varImp(modelo_rf)
impor
plot(impor)


# Comparando el entrenamiento en los modelos 
modelos  <- list(CART          = modelo_cart,
                 Bagging       = modelo_bag,
                 Random_Forest = modelo_rf)

comparacion_modelos <- resamples(modelos) 
Resumen<-summary(comparacion_modelos)
Resumen
bwplot(comparacion_modelos)
densityplot(comparacion_modelos, metric = "Accuracy",auto.key=TRUE)



#Curvas ROC
# Formato 1
# -----------
library(ROCR)
roc.curve(data.test$Credito,pred_cart2[,2],lty=2,lwd=1.8, col="red")
roc.curve(data.test$Credito,pred_bag2[,2],add.roc=T,lty=2,lwd=1.8,col="green")
roc.curve(data.test$Credito,pred_rf2[,2],add.roc=T,lwd=2,col="blue")
legend("bottomright", names(modelos), col=c("red","green","blue"), lwd = 1)

# Formato 2
# -----------
CURVAS<-function(modelos,datos.test){
  test_prob <- function(model, data) {
    list(predict(model, data, type = "prob")[, 2])}
  prob_list<- modelos %>% map(test_prob, data = datos.test)
  mscurves=evalmod(mmdata(prob_list,datos.test[,1],modnames=names(prob_list)))
  aucs<-data.frame(subset(auc(mscurves),curvetypes=="ROC")[,-c(2:3)])
  names(aucs)<-c("Modelos","ROC-auc")
  autoplot(mscurves);print(aucs)}
CURVAS(modelos,data.test)


# ComparaciOn
# -----------
test_AC<- function(model, data) {
  mean(predict(model, data, type = "raw")== data[,1])}
model_list_AC<- modelos %>% map(test_AC, data = data.test)
l<-data.frame(melt(model_list_AC)[,c(2,1)])
Acur<-cbind(data.frame(Resumen$statistics$Accuracy)[,4])
comparaciOn<-data.frame(l,Acur)[,c(1,3,2)]
names(comparaciOn)<-c("Modelos","Accuracy CV","Accuracy")
comparaciOn

d=melt(comparaciOn)
ggplot(data=d, aes(x=reorder(Modelos,value), y=value, fill=variable)) +
  geom_bar(stat="identity", position=position_dodge())+
  geom_text(aes(label=round(value,3)), vjust=0.5, hjust=1.5,color="white",
            position = position_dodge(0.9), size=3.5)+
  scale_fill_brewer(palette="Paired")+ coord_flip()+theme_minimal()+
  labs(title="Rsquare Train-Test Vs Rsquare CV")+xlab("Modelos")+ylab("Accuracy")


# Nuevas predicciones
#------------------------------
nuevos<-read.delim("clipboard")
nuevos$Educacion<-ordered(nuevos$Educacion,c("No.Sup","Sup.Incomp","Sup.Comp"))
pred_nuevos <- predict(modelo_bag, newdata=nuevos,type="prob")
final<-data.frame(pred_nuevos,nuevos)
final

pred_nuevos <- predict(modelo_bag, newdata=nuevos,type="raw")
final<-data.frame(pred_nuevos,nuevos)
final

# Guardar cualquier archivo
#------------------------------
setwd("E:/PREDICCIONES")

write.table(final, file = "predicciones.txt", sep = "\t", eol = "\n", dec = ".", row.names = F, col.names = TRUE)

# Guardar modelo en UCV O DISCO
#------------------------------
saveRDS(modelo_bag, "./modelo_boos.rds")

# Leer el modelo final
#---------------------
super_model <- readRDS("./modelo_bag.rds")
print(super_model)
# Hacer predicciones
final_predictions <- predict(super_model, nuevos)
final_predictions