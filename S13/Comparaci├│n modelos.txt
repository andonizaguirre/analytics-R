#------------------------------------------------------------------#
#                               LIBRARIAS                          #
#------------------------------------------------------------------#
library(ggplot2)
library(reshape)
library(ggpubr)
library(reshape2)
library(dplyr)
library(caret)
library(rpart)
library(purrr)
library(precrec)
library(ROSE)
library(ROCR)
library(adabag)
library(randomForest)

#------------------------------------------------------------------#
#                       CARGANDO LA BASE DE DATOS                  #
#------------------------------------------------------------------#
Datos<-read.delim("clipboard")
Datos <- Datos[,-1]
Datos$Cupon <- as.factor(Datos$Cupon)
Datos$Tarjeta <- as.factor(Datos$Tarjeta)
head(Datos,10)
str(Datos)

#------------------------------------------------------------------#
#               DATOS DE ENTRENAMIENTO Y DE PRUEBA                 #
#------------------------------------------------------------------#

set.seed(100)
indice<- createDataPartition(Datos$Cupon, p=0.7, list=FALSE)
data.train <- Datos[ indice, ]                         
data.test  <- Datos[-indice, ] 
dim(data.train)
dim(data.test)

#------------------------------------------------------------------#
#                         ALGORITMO CART                           #
#------------------------------------------------------------------#

set.seed(100)
ctrl <- trainControl(method="cv", number=10)
# classProbs=TRUE,summaryFunction = twoClassSummary)
modelo_cart <- train(Cupon ~ ., 
                     data = data.train, 
                     method = "rpart", 
                     trControl = ctrl, 
                     tuneGrid = expand.grid(cp=seq(0,0.5,0.001)),
                     metric="Accuracy" )
modelo_cart

pred_cart <- predict(modelo_cart, newdata=data.test[,-3],type="raw")
confusionMatrix(data= pred_cart, reference= as.factor(data.test$Cupon), positive="1")

# PredicciÃ³n correcta y error
# ---------------------------
accuracy <- mean(data.test$Cupon==pred_cart) ; accuracy
error <- mean(data.test$Cupon!=pred_cart) ; error

# Curva ROC
# -----------
pred_cart2 <- predict(modelo_cart, newdata=data.test[,-3],type="prob")
roc.curve(data.test$Cupon, pred_cart2[,2],lty=2,lwd=1.8,col="blue" ,main="ROC curves")

# Importancia de Variables
# -------------------------
impor=varImp(modelo_cart)
impor
plot(impor)

#------------------------------------------------------------------#
#                      EL ALGORITMO BAGGING                        #
#------------------------------------------------------------------#
set.seed(100)
ctrl <- trainControl(method="cv",number=10)
modelo_bag <- train(Cupon ~ ., 
                    data = data.train, 
                    method = "treebag",
                    trControl = ctrl, 
                    tuneLength = 5, 
                    metric="Accuracy")
modelo_bag

pred_bag <- predict(modelo_bag, newdata=data.test[,-3],type="raw")
confusionMatrix(data= pred_bag, reference= as.factor(data.test$Cupon), positive="1")

# PredicciÃ³n correcta y error
# ---------------------------
accuracy <- mean(data.test$Cupon==pred_bag) ; accuracy
error <- mean(data.test$Cupon!=pred_bag) ; error

# Curva ROC
# -----------
pred_bag2 <- predict(modelo_bag, newdata=data.test[,-3],type="prob")
roc.curve(data.test$Cupon, pred_bag2[,2],lty=2,lwd=1.8,col="blue" ,main="ROC curves")


# Importancia de Variables
# -------------------------
impor=varImp(modelo_bag)
impor
plot(impor)

#------------------------------------------------------------------#
#                   EL ALGORITMO RANDOM FOREST                     #
#------------------------------------------------------------------#

set.seed(100)
modelLookup(model='rf')
ctrl <- trainControl(method="cv",number=10)

modelo_rf <- train(Cupon ~ ., 
                   data = data.train, 
                   method = "rf", 
                   trControl = ctrl, 
                   tuneLength = 5,
                   metric="Accuracy")

modelo_rf

pred_rf <- predict(modelo_rf, newdata=data.test[,-3],type="raw")
confusionMatrix(data= pred_rf, reference= as.factor(data.test$Cupon), positive="1")

# Prediccion correcta y error
# ---------------------------
accuracy <- mean(data.test$Cupon==pred_rf) ; accuracy
error <- mean(data.test$Cupon!=pred_rf) ; error

# Curva ROC
# -----------
pred_rf2 <- predict(modelo_rf, newdata=data.test[,-3],type="prob")
roc.curve(data.test$Cupon, pred_rf2[,2],lty=2,lwd=1.8,col="blue" ,main="ROC curves")

# Importancia de Variables
# -------------------------
impor=varImp(modelo_rf)
impor
plot(impor)

# Algoritmo adaboost
# -------------------------

set.seed(100)
ctrl <- trainControl(method="cv", number=2)

modelo_boos <- train(Cupon ~ ., 
                     data = data.train, 
                     method = "AdaBoost.M1", tuneLength=1,
                     trControl=ctrl, metric="Accuracy")

pred_boos <- predict(modelo_boos, newdata=data.test[,-3],type="raw")
confusionMatrix(data= pred_boos, reference= as.factor(data.test$Cupon), positive="1")

# Predicci?n correcta y error
# ---------------------------
accuracy <- mean(data.test$Cupon==pred_boos) ; accuracy
error <- mean(data.test$Cupon!=pred_boos) ; error

# Curva ROC
# -----------
pred_boos2 <- predict(modelo_boos, newdata=data.test[,-3],type="prob")
roc.curve(data.test$Cupon, pred_boos2[,2],lty=2,lwd=1.8,col="blue" ,main="ROC curves")

# Importancia de Variables
# -------------------------
impor=varImp(modelo_boos)
impor
plot(impor)


# Nuevas predicciones
#------------------------------
nuevos <- data.frame(Gasto=5, Tarjeta ="1")

pred_nuevos <- predict(modelo_rf, newdata=nuevos,type="prob")
final<-data.frame(pred_nuevos,nuevos)
final

pred_nuevos <- predict(modelo_rf, newdata=nuevos,type="raw")
pred_nuevos
final<-data.frame(pred_nuevos,nuevos)
final